Given a space o N features to be modeled

Create an arbitrary  M X N x O tensor called W , where M X N is the shape each kohonen layer indexed by i,j.

For definition we call the  all O values in the i-th,j-th position in the MAP as a "neuron line"

TRAINING:

1. 
Fill MAP with random values near zero (or with random values in range of each layer data range), for example, if layer 2 related to depth varies from 100 to 2000, fill with random uniform data in this range. Some remarks: 1. why not initialize with random values near zero? Call

2. Create a empty tensor of N x M called CLASS

2. For each ENTRY (r) in TRAINING SET, where each ENTRY is O dimensional

2.1 For each W_ij in W:

2.1.1 delta_ij = | r - W_ij |_2^2

2.2 Find the ith/jth neuron line with smallest l2 distance. We call it N*, or the winning 'neuron line'.

2.3 Fill the i-th, j-th position of CLASS tensor with the same class id of the ENTRY vector

2.4 For each NEIGHBOR of set ADJ(N*):  # The definition of NEIGHBORS is flexible.

2.4.1. Apply the LEARNING in the NEIGHBOR





About Neighbors:

In the model Neighbors are the nearest adjacent elements given each of the edges of the N* element.

In spatial coordinates of the square grid they are given by set with 4 elements:

ADJ(N*) = {
            (N*_i + 1 % M, N*_j        ),
            (N*_i - 1 % M, N*_j        ), 
            (N*_i        , N*_j + 1 % N), 
            (N*_i        , N*_j - 1 % N), 
	  }


About Learning:
===============

Cooling


